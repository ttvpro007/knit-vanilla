{
  "version": 3,
  "sources": ["../../.pnpm/three@0.172.0/node_modules/three/examples/jsm/libs/ecsy.module.js"],
  "sourcesContent": ["/**\n * Return the name of a component\n * @param {Component} Component\n * @private\n */\n\n/**\n * Get a key from a list of components\n * @param {Array(Component)} Components Array of components to generate the key\n * @private\n */\nfunction queryKey(Components) {\n  var ids = [];\n  for (var n = 0; n < Components.length; n++) {\n    var T = Components[n];\n\n    if (!componentRegistered(T)) {\n      throw new Error(`Tried to create a query with an unregistered component`);\n    }\n\n    if (typeof T === \"object\") {\n      var operator = T.operator === \"not\" ? \"!\" : T.operator;\n      ids.push(operator + T.Component._typeId);\n    } else {\n      ids.push(T._typeId);\n    }\n  }\n\n  return ids.sort().join(\"-\");\n}\n\n// Detector for browser's \"window\"\nconst hasWindow = typeof window !== \"undefined\";\n\n// performance.now() \"polyfill\"\nconst now =\n  hasWindow && typeof window.performance !== \"undefined\"\n    ? performance.now.bind(performance)\n    : Date.now.bind(Date);\n\nfunction componentRegistered(T) {\n  return (\n    (typeof T === \"object\" && T.Component._typeId !== undefined) ||\n    (T.isComponent && T._typeId !== undefined)\n  );\n}\n\nclass SystemManager {\n  constructor(world) {\n    this._systems = [];\n    this._executeSystems = []; // Systems that have `execute` method\n    this.world = world;\n    this.lastExecutedSystem = null;\n  }\n\n  registerSystem(SystemClass, attributes) {\n    if (!SystemClass.isSystem) {\n      throw new Error(\n        `System '${SystemClass.name}' does not extend 'System' class`\n      );\n    }\n\n    if (this.getSystem(SystemClass) !== undefined) {\n      console.warn(`System '${SystemClass.getName()}' already registered.`);\n      return this;\n    }\n\n    var system = new SystemClass(this.world, attributes);\n    if (system.init) system.init(attributes);\n    system.order = this._systems.length;\n    this._systems.push(system);\n    if (system.execute) {\n      this._executeSystems.push(system);\n      this.sortSystems();\n    }\n    return this;\n  }\n\n  unregisterSystem(SystemClass) {\n    let system = this.getSystem(SystemClass);\n    if (system === undefined) {\n      console.warn(\n        `Can unregister system '${SystemClass.getName()}'. It doesn't exist.`\n      );\n      return this;\n    }\n\n    this._systems.splice(this._systems.indexOf(system), 1);\n\n    if (system.execute) {\n      this._executeSystems.splice(this._executeSystems.indexOf(system), 1);\n    }\n\n    // @todo Add system.unregister() call to free resources\n    return this;\n  }\n\n  sortSystems() {\n    this._executeSystems.sort((a, b) => {\n      return a.priority - b.priority || a.order - b.order;\n    });\n  }\n\n  getSystem(SystemClass) {\n    return this._systems.find((s) => s instanceof SystemClass);\n  }\n\n  getSystems() {\n    return this._systems;\n  }\n\n  removeSystem(SystemClass) {\n    var index = this._systems.indexOf(SystemClass);\n    if (!~index) return;\n\n    this._systems.splice(index, 1);\n  }\n\n  executeSystem(system, delta, time) {\n    if (system.initialized) {\n      if (system.canExecute()) {\n        let startTime = now();\n        system.execute(delta, time);\n        system.executeTime = now() - startTime;\n        this.lastExecutedSystem = system;\n        system.clearEvents();\n      }\n    }\n  }\n\n  stop() {\n    this._executeSystems.forEach((system) => system.stop());\n  }\n\n  execute(delta, time, forcePlay) {\n    this._executeSystems.forEach(\n      (system) =>\n        (forcePlay || system.enabled) && this.executeSystem(system, delta, time)\n    );\n  }\n\n  stats() {\n    var stats = {\n      numSystems: this._systems.length,\n      systems: {},\n    };\n\n    for (var i = 0; i < this._systems.length; i++) {\n      var system = this._systems[i];\n      var systemStats = (stats.systems[system.getName()] = {\n        queries: {},\n        executeTime: system.executeTime,\n      });\n      for (var name in system.ctx) {\n        systemStats.queries[name] = system.ctx[name].stats();\n      }\n    }\n\n    return stats;\n  }\n}\n\nclass ObjectPool {\n  // @todo Add initial size\n  constructor(T, initialSize) {\n    this.freeList = [];\n    this.count = 0;\n    this.T = T;\n    this.isObjectPool = true;\n\n    if (typeof initialSize !== \"undefined\") {\n      this.expand(initialSize);\n    }\n  }\n\n  acquire() {\n    // Grow the list by 20%ish if we're out\n    if (this.freeList.length <= 0) {\n      this.expand(Math.round(this.count * 0.2) + 1);\n    }\n\n    var item = this.freeList.pop();\n\n    return item;\n  }\n\n  release(item) {\n    item.reset();\n    this.freeList.push(item);\n  }\n\n  expand(count) {\n    for (var n = 0; n < count; n++) {\n      var clone = new this.T();\n      clone._pool = this;\n      this.freeList.push(clone);\n    }\n    this.count += count;\n  }\n\n  totalSize() {\n    return this.count;\n  }\n\n  totalFree() {\n    return this.freeList.length;\n  }\n\n  totalUsed() {\n    return this.count - this.freeList.length;\n  }\n}\n\n/**\n * @private\n * @class EventDispatcher\n */\nclass EventDispatcher {\n  constructor() {\n    this._listeners = {};\n    this.stats = {\n      fired: 0,\n      handled: 0,\n    };\n  }\n\n  /**\n   * Add an event listener\n   * @param {String} eventName Name of the event to listen\n   * @param {Function} listener Callback to trigger when the event is fired\n   */\n  addEventListener(eventName, listener) {\n    let listeners = this._listeners;\n    if (listeners[eventName] === undefined) {\n      listeners[eventName] = [];\n    }\n\n    if (listeners[eventName].indexOf(listener) === -1) {\n      listeners[eventName].push(listener);\n    }\n  }\n\n  /**\n   * Check if an event listener is already added to the list of listeners\n   * @param {String} eventName Name of the event to check\n   * @param {Function} listener Callback for the specified event\n   */\n  hasEventListener(eventName, listener) {\n    return (\n      this._listeners[eventName] !== undefined &&\n      this._listeners[eventName].indexOf(listener) !== -1\n    );\n  }\n\n  /**\n   * Remove an event listener\n   * @param {String} eventName Name of the event to remove\n   * @param {Function} listener Callback for the specified event\n   */\n  removeEventListener(eventName, listener) {\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param {String} eventName Name of the event to dispatch\n   * @param {Entity} entity (Optional) Entity to emit\n   * @param {Component} component\n   */\n  dispatchEvent(eventName, entity, component) {\n    this.stats.fired++;\n\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var array = listenerArray.slice(0);\n\n      for (var i = 0; i < array.length; i++) {\n        array[i].call(this, entity, component);\n      }\n    }\n  }\n\n  /**\n   * Reset stats counters\n   */\n  resetCounters() {\n    this.stats.fired = this.stats.handled = 0;\n  }\n}\n\nclass Query {\n  /**\n   * @param {Array(Component)} Components List of types of components to query\n   */\n  constructor(Components, manager) {\n    this.Components = [];\n    this.NotComponents = [];\n\n    Components.forEach((component) => {\n      if (typeof component === \"object\") {\n        this.NotComponents.push(component.Component);\n      } else {\n        this.Components.push(component);\n      }\n    });\n\n    if (this.Components.length === 0) {\n      throw new Error(\"Can't create a query without components\");\n    }\n\n    this.entities = [];\n\n    this.eventDispatcher = new EventDispatcher();\n\n    // This query is being used by a reactive system\n    this.reactive = false;\n\n    this.key = queryKey(Components);\n\n    // Fill the query with the existing entities\n    for (var i = 0; i < manager._entities.length; i++) {\n      var entity = manager._entities[i];\n      if (this.match(entity)) {\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\n        entity.queries.push(this);\n        this.entities.push(entity);\n      }\n    }\n  }\n\n  /**\n   * Add entity to this query\n   * @param {Entity} entity\n   */\n  addEntity(entity) {\n    entity.queries.push(this);\n    this.entities.push(entity);\n\n    this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED, entity);\n  }\n\n  /**\n   * Remove entity from this query\n   * @param {Entity} entity\n   */\n  removeEntity(entity) {\n    let index = this.entities.indexOf(entity);\n    if (~index) {\n      this.entities.splice(index, 1);\n\n      index = entity.queries.indexOf(this);\n      entity.queries.splice(index, 1);\n\n      this.eventDispatcher.dispatchEvent(\n        Query.prototype.ENTITY_REMOVED,\n        entity\n      );\n    }\n  }\n\n  match(entity) {\n    return (\n      entity.hasAllComponents(this.Components) &&\n      !entity.hasAnyComponents(this.NotComponents)\n    );\n  }\n\n  toJSON() {\n    return {\n      key: this.key,\n      reactive: this.reactive,\n      components: {\n        included: this.Components.map((C) => C.name),\n        not: this.NotComponents.map((C) => C.name),\n      },\n      numEntities: this.entities.length,\n    };\n  }\n\n  /**\n   * Return stats for this query\n   */\n  stats() {\n    return {\n      numComponents: this.Components.length,\n      numEntities: this.entities.length,\n    };\n  }\n}\n\nQuery.prototype.ENTITY_ADDED = \"Query#ENTITY_ADDED\";\nQuery.prototype.ENTITY_REMOVED = \"Query#ENTITY_REMOVED\";\nQuery.prototype.COMPONENT_CHANGED = \"Query#COMPONENT_CHANGED\";\n\n/**\n * @private\n * @class QueryManager\n */\nclass QueryManager {\n  constructor(world) {\n    this._world = world;\n\n    // Queries indexed by a unique identifier for the components it has\n    this._queries = {};\n  }\n\n  onEntityRemoved(entity) {\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n      if (entity.queries.indexOf(query) !== -1) {\n        query.removeEntity(entity);\n      }\n    }\n  }\n\n  /**\n   * Callback when a component is added to an entity\n   * @param {Entity} entity Entity that just got the new component\n   * @param {Component} Component Component added to the entity\n   */\n  onEntityComponentAdded(entity, Component) {\n    // @todo Use bitmask for checking components?\n\n    // Check each indexed query to see if we need to add this entity to the list\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n\n      if (\n        !!~query.NotComponents.indexOf(Component) &&\n        ~query.entities.indexOf(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n\n      // Add the entity only if:\n      // Component is in the query\n      // and Entity has ALL the components of the query\n      // and Entity is not already in the query\n      if (\n        !~query.Components.indexOf(Component) ||\n        !query.match(entity) ||\n        ~query.entities.indexOf(entity)\n      )\n        continue;\n\n      query.addEntity(entity);\n    }\n  }\n\n  /**\n   * Callback when a component is removed from an entity\n   * @param {Entity} entity Entity to remove the component from\n   * @param {Component} Component Component to remove from the entity\n   */\n  onEntityComponentRemoved(entity, Component) {\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n\n      if (\n        !!~query.NotComponents.indexOf(Component) &&\n        !~query.entities.indexOf(entity) &&\n        query.match(entity)\n      ) {\n        query.addEntity(entity);\n        continue;\n      }\n\n      if (\n        !!~query.Components.indexOf(Component) &&\n        !!~query.entities.indexOf(entity) &&\n        !query.match(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n    }\n  }\n\n  /**\n   * Get a query for the specified components\n   * @param {Component} Components Components that the query should have\n   */\n  getQuery(Components) {\n    var key = queryKey(Components);\n    var query = this._queries[key];\n    if (!query) {\n      this._queries[key] = query = new Query(Components, this._world);\n    }\n    return query;\n  }\n\n  /**\n   * Return some stats from this class\n   */\n  stats() {\n    var stats = {};\n    for (var queryName in this._queries) {\n      stats[queryName] = this._queries[queryName].stats();\n    }\n    return stats;\n  }\n}\n\nclass Component {\n  constructor(props) {\n    if (props !== false) {\n      const schema = this.constructor.schema;\n\n      for (const key in schema) {\n        if (props && props.hasOwnProperty(key)) {\n          this[key] = props[key];\n        } else {\n          const schemaProp = schema[key];\n          if (schemaProp.hasOwnProperty(\"default\")) {\n            this[key] = schemaProp.type.clone(schemaProp.default);\n          } else {\n            const type = schemaProp.type;\n            this[key] = type.clone(type.default);\n          }\n        }\n      }\n\n      if ( props !== undefined) {\n        this.checkUndefinedAttributes(props);\n      }\n    }\n\n    this._pool = null;\n  }\n\n  copy(source) {\n    const schema = this.constructor.schema;\n\n    for (const key in schema) {\n      const prop = schema[key];\n\n      if (source.hasOwnProperty(key)) {\n        this[key] = prop.type.copy(source[key], this[key]);\n      }\n    }\n\n    // @DEBUG\n    {\n      this.checkUndefinedAttributes(source);\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  reset() {\n    const schema = this.constructor.schema;\n\n    for (const key in schema) {\n      const schemaProp = schema[key];\n\n      if (schemaProp.hasOwnProperty(\"default\")) {\n        this[key] = schemaProp.type.copy(schemaProp.default, this[key]);\n      } else {\n        const type = schemaProp.type;\n        this[key] = type.copy(type.default, this[key]);\n      }\n    }\n  }\n\n  dispose() {\n    if (this._pool) {\n      this._pool.release(this);\n    }\n  }\n\n  getName() {\n    return this.constructor.getName();\n  }\n\n  checkUndefinedAttributes(src) {\n    const schema = this.constructor.schema;\n\n    // Check that the attributes defined in source are also defined in the schema\n    Object.keys(src).forEach((srcKey) => {\n      if (!schema.hasOwnProperty(srcKey)) {\n        console.warn(\n          `Trying to set attribute '${srcKey}' not defined in the '${this.constructor.name}' schema. Please fix the schema, the attribute value won't be set`\n        );\n      }\n    });\n  }\n}\n\nComponent.schema = {};\nComponent.isComponent = true;\nComponent.getName = function () {\n  return this.displayName || this.name;\n};\n\nclass SystemStateComponent extends Component {}\n\nSystemStateComponent.isSystemStateComponent = true;\n\nclass EntityPool extends ObjectPool {\n  constructor(entityManager, entityClass, initialSize) {\n    super(entityClass, undefined);\n    this.entityManager = entityManager;\n\n    if (typeof initialSize !== \"undefined\") {\n      this.expand(initialSize);\n    }\n  }\n\n  expand(count) {\n    for (var n = 0; n < count; n++) {\n      var clone = new this.T(this.entityManager);\n      clone._pool = this;\n      this.freeList.push(clone);\n    }\n    this.count += count;\n  }\n}\n\n/**\n * @private\n * @class EntityManager\n */\nclass EntityManager {\n  constructor(world) {\n    this.world = world;\n    this.componentsManager = world.componentsManager;\n\n    // All the entities in this instance\n    this._entities = [];\n    this._nextEntityId = 0;\n\n    this._entitiesByNames = {};\n\n    this._queryManager = new QueryManager(this);\n    this.eventDispatcher = new EventDispatcher();\n    this._entityPool = new EntityPool(\n      this,\n      this.world.options.entityClass,\n      this.world.options.entityPoolSize\n    );\n\n    // Deferred deletion\n    this.entitiesWithComponentsToRemove = [];\n    this.entitiesToRemove = [];\n    this.deferredRemovalEnabled = true;\n  }\n\n  getEntityByName(name) {\n    return this._entitiesByNames[name];\n  }\n\n  /**\n   * Create a new entity\n   */\n  createEntity(name) {\n    var entity = this._entityPool.acquire();\n    entity.alive = true;\n    entity.name = name || \"\";\n    if (name) {\n      if (this._entitiesByNames[name]) {\n        console.warn(`Entity name '${name}' already exist`);\n      } else {\n        this._entitiesByNames[name] = entity;\n      }\n    }\n\n    this._entities.push(entity);\n    this.eventDispatcher.dispatchEvent(ENTITY_CREATED, entity);\n    return entity;\n  }\n\n  // COMPONENTS\n\n  /**\n   * Add a component to an entity\n   * @param {Entity} entity Entity where the component will be added\n   * @param {Component} Component Component to be added to the entity\n   * @param {Object} values Optional values to replace the default attributes\n   */\n  entityAddComponent(entity, Component, values) {\n    // @todo Probably define Component._typeId with a default value and avoid using typeof\n    if (\n      typeof Component._typeId === \"undefined\" &&\n      !this.world.componentsManager._ComponentsMap[Component._typeId]\n    ) {\n      throw new Error(\n        `Attempted to add unregistered component \"${Component.getName()}\"`\n      );\n    }\n\n    if (~entity._ComponentTypes.indexOf(Component)) {\n      {\n        console.warn(\n          \"Component type already exists on entity.\",\n          entity,\n          Component.getName()\n        );\n      }\n      return;\n    }\n\n    entity._ComponentTypes.push(Component);\n\n    if (Component.__proto__ === SystemStateComponent) {\n      entity.numStateComponents++;\n    }\n\n    var componentPool = this.world.componentsManager.getComponentsPool(\n      Component\n    );\n\n    var component = componentPool\n      ? componentPool.acquire()\n      : new Component(values);\n\n    if (componentPool && values) {\n      component.copy(values);\n    }\n\n    entity._components[Component._typeId] = component;\n\n    this._queryManager.onEntityComponentAdded(entity, Component);\n    this.world.componentsManager.componentAddedToEntity(Component);\n\n    this.eventDispatcher.dispatchEvent(COMPONENT_ADDED, entity, Component);\n  }\n\n  /**\n   * Remove a component from an entity\n   * @param {Entity} entity Entity which will get removed the component\n   * @param {*} Component Component to remove from the entity\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  entityRemoveComponent(entity, Component, immediately) {\n    var index = entity._ComponentTypes.indexOf(Component);\n    if (!~index) return;\n\n    this.eventDispatcher.dispatchEvent(COMPONENT_REMOVE, entity, Component);\n\n    if (immediately) {\n      this._entityRemoveComponentSync(entity, Component, index);\n    } else {\n      if (entity._ComponentTypesToRemove.length === 0)\n        this.entitiesWithComponentsToRemove.push(entity);\n\n      entity._ComponentTypes.splice(index, 1);\n      entity._ComponentTypesToRemove.push(Component);\n\n      entity._componentsToRemove[Component._typeId] =\n        entity._components[Component._typeId];\n      delete entity._components[Component._typeId];\n    }\n\n    // Check each indexed query to see if we need to remove it\n    this._queryManager.onEntityComponentRemoved(entity, Component);\n\n    if (Component.__proto__ === SystemStateComponent) {\n      entity.numStateComponents--;\n\n      // Check if the entity was a ghost waiting for the last system state component to be removed\n      if (entity.numStateComponents === 0 && !entity.alive) {\n        entity.remove();\n      }\n    }\n  }\n\n  _entityRemoveComponentSync(entity, Component, index) {\n    // Remove T listing on entity and property ref, then free the component.\n    entity._ComponentTypes.splice(index, 1);\n    var component = entity._components[Component._typeId];\n    delete entity._components[Component._typeId];\n    component.dispose();\n    this.world.componentsManager.componentRemovedFromEntity(Component);\n  }\n\n  /**\n   * Remove all the components from an entity\n   * @param {Entity} entity Entity from which the components will be removed\n   */\n  entityRemoveAllComponents(entity, immediately) {\n    let Components = entity._ComponentTypes;\n\n    for (let j = Components.length - 1; j >= 0; j--) {\n      if (Components[j].__proto__ !== SystemStateComponent)\n        this.entityRemoveComponent(entity, Components[j], immediately);\n    }\n  }\n\n  /**\n   * Remove the entity from this manager. It will clear also its components\n   * @param {Entity} entity Entity to remove from the manager\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  removeEntity(entity, immediately) {\n    var index = this._entities.indexOf(entity);\n\n    if (!~index) throw new Error(\"Tried to remove entity not in list\");\n\n    entity.alive = false;\n    this.entityRemoveAllComponents(entity, immediately);\n\n    if (entity.numStateComponents === 0) {\n      // Remove from entity list\n      this.eventDispatcher.dispatchEvent(ENTITY_REMOVED, entity);\n      this._queryManager.onEntityRemoved(entity);\n      if (immediately === true) {\n        this._releaseEntity(entity, index);\n      } else {\n        this.entitiesToRemove.push(entity);\n      }\n    }\n  }\n\n  _releaseEntity(entity, index) {\n    this._entities.splice(index, 1);\n\n    if (this._entitiesByNames[entity.name]) {\n      delete this._entitiesByNames[entity.name];\n    }\n    entity._pool.release(entity);\n  }\n\n  /**\n   * Remove all entities from this manager\n   */\n  removeAllEntities() {\n    for (var i = this._entities.length - 1; i >= 0; i--) {\n      this.removeEntity(this._entities[i]);\n    }\n  }\n\n  processDeferredRemoval() {\n    if (!this.deferredRemovalEnabled) {\n      return;\n    }\n\n    for (let i = 0; i < this.entitiesToRemove.length; i++) {\n      let entity = this.entitiesToRemove[i];\n      let index = this._entities.indexOf(entity);\n      this._releaseEntity(entity, index);\n    }\n    this.entitiesToRemove.length = 0;\n\n    for (let i = 0; i < this.entitiesWithComponentsToRemove.length; i++) {\n      let entity = this.entitiesWithComponentsToRemove[i];\n      while (entity._ComponentTypesToRemove.length > 0) {\n        let Component = entity._ComponentTypesToRemove.pop();\n\n        var component = entity._componentsToRemove[Component._typeId];\n        delete entity._componentsToRemove[Component._typeId];\n        component.dispose();\n        this.world.componentsManager.componentRemovedFromEntity(Component);\n\n        //this._entityRemoveComponentSync(entity, Component, index);\n      }\n    }\n\n    this.entitiesWithComponentsToRemove.length = 0;\n  }\n\n  /**\n   * Get a query based on a list of components\n   * @param {Array(Component)} Components List of components that will form the query\n   */\n  queryComponents(Components) {\n    return this._queryManager.getQuery(Components);\n  }\n\n  // EXTRAS\n\n  /**\n   * Return number of entities\n   */\n  count() {\n    return this._entities.length;\n  }\n\n  /**\n   * Return some stats\n   */\n  stats() {\n    var stats = {\n      numEntities: this._entities.length,\n      numQueries: Object.keys(this._queryManager._queries).length,\n      queries: this._queryManager.stats(),\n      numComponentPool: Object.keys(this.componentsManager._componentPool)\n        .length,\n      componentPool: {},\n      eventDispatcher: this.eventDispatcher.stats,\n    };\n\n    for (var ecsyComponentId in this.componentsManager._componentPool) {\n      var pool = this.componentsManager._componentPool[ecsyComponentId];\n      stats.componentPool[pool.T.getName()] = {\n        used: pool.totalUsed(),\n        size: pool.count,\n      };\n    }\n\n    return stats;\n  }\n}\n\nconst ENTITY_CREATED = \"EntityManager#ENTITY_CREATE\";\nconst ENTITY_REMOVED = \"EntityManager#ENTITY_REMOVED\";\nconst COMPONENT_ADDED = \"EntityManager#COMPONENT_ADDED\";\nconst COMPONENT_REMOVE = \"EntityManager#COMPONENT_REMOVE\";\n\nclass ComponentManager {\n  constructor() {\n    this.Components = [];\n    this._ComponentsMap = {};\n\n    this._componentPool = {};\n    this.numComponents = {};\n    this.nextComponentId = 0;\n  }\n\n  hasComponent(Component) {\n    return this.Components.indexOf(Component) !== -1;\n  }\n\n  registerComponent(Component, objectPool) {\n    if (this.Components.indexOf(Component) !== -1) {\n      console.warn(\n        `Component type: '${Component.getName()}' already registered.`\n      );\n      return;\n    }\n\n    const schema = Component.schema;\n\n    if (!schema) {\n      throw new Error(\n        `Component \"${Component.getName()}\" has no schema property.`\n      );\n    }\n\n    for (const propName in schema) {\n      const prop = schema[propName];\n\n      if (!prop.type) {\n        throw new Error(\n          `Invalid schema for component \"${Component.getName()}\". Missing type for \"${propName}\" property.`\n        );\n      }\n    }\n\n    Component._typeId = this.nextComponentId++;\n    this.Components.push(Component);\n    this._ComponentsMap[Component._typeId] = Component;\n    this.numComponents[Component._typeId] = 0;\n\n    if (objectPool === undefined) {\n      objectPool = new ObjectPool(Component);\n    } else if (objectPool === false) {\n      objectPool = undefined;\n    }\n\n    this._componentPool[Component._typeId] = objectPool;\n  }\n\n  componentAddedToEntity(Component) {\n    this.numComponents[Component._typeId]++;\n  }\n\n  componentRemovedFromEntity(Component) {\n    this.numComponents[Component._typeId]--;\n  }\n\n  getComponentsPool(Component) {\n    return this._componentPool[Component._typeId];\n  }\n}\n\nconst Version = \"0.3.1\";\n\nconst proxyMap = new WeakMap();\n\nconst proxyHandler = {\n  set(target, prop) {\n    throw new Error(\n      `Tried to write to \"${target.constructor.getName()}#${String(\n        prop\n      )}\" on immutable component. Use .getMutableComponent() to modify a component.`\n    );\n  },\n};\n\nfunction wrapImmutableComponent(T, component) {\n  if (component === undefined) {\n    return undefined;\n  }\n\n  let wrappedComponent = proxyMap.get(component);\n\n  if (!wrappedComponent) {\n    wrappedComponent = new Proxy(component, proxyHandler);\n    proxyMap.set(component, wrappedComponent);\n  }\n\n  return wrappedComponent;\n}\n\nclass Entity {\n  constructor(entityManager) {\n    this._entityManager = entityManager || null;\n\n    // Unique ID for this entity\n    this.id = entityManager._nextEntityId++;\n\n    // List of components types the entity has\n    this._ComponentTypes = [];\n\n    // Instance of the components\n    this._components = {};\n\n    this._componentsToRemove = {};\n\n    // Queries where the entity is added\n    this.queries = [];\n\n    // Used for deferred removal\n    this._ComponentTypesToRemove = [];\n\n    this.alive = false;\n\n    //if there are state components on a entity, it can't be removed completely\n    this.numStateComponents = 0;\n  }\n\n  // COMPONENTS\n\n  getComponent(Component, includeRemoved) {\n    var component = this._components[Component._typeId];\n\n    if (!component && includeRemoved === true) {\n      component = this._componentsToRemove[Component._typeId];\n    }\n\n    return  wrapImmutableComponent(Component, component)\n      ;\n  }\n\n  getRemovedComponent(Component) {\n    const component = this._componentsToRemove[Component._typeId];\n\n    return  wrapImmutableComponent(Component, component)\n      ;\n  }\n\n  getComponents() {\n    return this._components;\n  }\n\n  getComponentsToRemove() {\n    return this._componentsToRemove;\n  }\n\n  getComponentTypes() {\n    return this._ComponentTypes;\n  }\n\n  getMutableComponent(Component) {\n    var component = this._components[Component._typeId];\n\n    if (!component) {\n      return;\n    }\n\n    for (var i = 0; i < this.queries.length; i++) {\n      var query = this.queries[i];\n      // @todo accelerate this check. Maybe having query._Components as an object\n      // @todo add Not components\n      if (query.reactive && query.Components.indexOf(Component) !== -1) {\n        query.eventDispatcher.dispatchEvent(\n          Query.prototype.COMPONENT_CHANGED,\n          this,\n          component\n        );\n      }\n    }\n    return component;\n  }\n\n  addComponent(Component, values) {\n    this._entityManager.entityAddComponent(this, Component, values);\n    return this;\n  }\n\n  removeComponent(Component, forceImmediate) {\n    this._entityManager.entityRemoveComponent(this, Component, forceImmediate);\n    return this;\n  }\n\n  hasComponent(Component, includeRemoved) {\n    return (\n      !!~this._ComponentTypes.indexOf(Component) ||\n      (includeRemoved === true && this.hasRemovedComponent(Component))\n    );\n  }\n\n  hasRemovedComponent(Component) {\n    return !!~this._ComponentTypesToRemove.indexOf(Component);\n  }\n\n  hasAllComponents(Components) {\n    for (var i = 0; i < Components.length; i++) {\n      if (!this.hasComponent(Components[i])) return false;\n    }\n    return true;\n  }\n\n  hasAnyComponents(Components) {\n    for (var i = 0; i < Components.length; i++) {\n      if (this.hasComponent(Components[i])) return true;\n    }\n    return false;\n  }\n\n  removeAllComponents(forceImmediate) {\n    return this._entityManager.entityRemoveAllComponents(this, forceImmediate);\n  }\n\n  copy(src) {\n    // TODO: This can definitely be optimized\n    for (var ecsyComponentId in src._components) {\n      var srcComponent = src._components[ecsyComponentId];\n      this.addComponent(srcComponent.constructor);\n      var component = this.getComponent(srcComponent.constructor);\n      component.copy(srcComponent);\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new Entity(this._entityManager).copy(this);\n  }\n\n  reset() {\n    this.id = this._entityManager._nextEntityId++;\n    this._ComponentTypes.length = 0;\n    this.queries.length = 0;\n\n    for (var ecsyComponentId in this._components) {\n      delete this._components[ecsyComponentId];\n    }\n  }\n\n  remove(forceImmediate) {\n    return this._entityManager.removeEntity(this, forceImmediate);\n  }\n}\n\nconst DEFAULT_OPTIONS = {\n  entityPoolSize: 0,\n  entityClass: Entity,\n};\n\nclass World {\n  constructor(options = {}) {\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    this.componentsManager = new ComponentManager(this);\n    this.entityManager = new EntityManager(this);\n    this.systemManager = new SystemManager(this);\n\n    this.enabled = true;\n\n    this.eventQueues = {};\n\n    if (hasWindow && typeof CustomEvent !== \"undefined\") {\n      var event = new CustomEvent(\"ecsy-world-created\", {\n        detail: { world: this, version: Version },\n      });\n      window.dispatchEvent(event);\n    }\n\n    this.lastTime = now() / 1000;\n  }\n\n  registerComponent(Component, objectPool) {\n    this.componentsManager.registerComponent(Component, objectPool);\n    return this;\n  }\n\n  registerSystem(System, attributes) {\n    this.systemManager.registerSystem(System, attributes);\n    return this;\n  }\n\n  hasRegisteredComponent(Component) {\n    return this.componentsManager.hasComponent(Component);\n  }\n\n  unregisterSystem(System) {\n    this.systemManager.unregisterSystem(System);\n    return this;\n  }\n\n  getSystem(SystemClass) {\n    return this.systemManager.getSystem(SystemClass);\n  }\n\n  getSystems() {\n    return this.systemManager.getSystems();\n  }\n\n  execute(delta, time) {\n    if (!delta) {\n      time = now() / 1000;\n      delta = time - this.lastTime;\n      this.lastTime = time;\n    }\n\n    if (this.enabled) {\n      this.systemManager.execute(delta, time);\n      this.entityManager.processDeferredRemoval();\n    }\n  }\n\n  stop() {\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  createEntity(name) {\n    return this.entityManager.createEntity(name);\n  }\n\n  stats() {\n    var stats = {\n      entities: this.entityManager.stats(),\n      system: this.systemManager.stats(),\n    };\n\n    return stats;\n  }\n}\n\nclass System {\n  canExecute() {\n    if (this._mandatoryQueries.length === 0) return true;\n\n    for (let i = 0; i < this._mandatoryQueries.length; i++) {\n      var query = this._mandatoryQueries[i];\n      if (query.entities.length === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getName() {\n    return this.constructor.getName();\n  }\n\n  constructor(world, attributes) {\n    this.world = world;\n    this.enabled = true;\n\n    // @todo Better naming :)\n    this._queries = {};\n    this.queries = {};\n\n    this.priority = 0;\n\n    // Used for stats\n    this.executeTime = 0;\n\n    if (attributes && attributes.priority) {\n      this.priority = attributes.priority;\n    }\n\n    this._mandatoryQueries = [];\n\n    this.initialized = true;\n\n    if (this.constructor.queries) {\n      for (var queryName in this.constructor.queries) {\n        var queryConfig = this.constructor.queries[queryName];\n        var Components = queryConfig.components;\n        if (!Components || Components.length === 0) {\n          throw new Error(\"'components' attribute can't be empty in a query\");\n        }\n\n        // Detect if the components have already been registered\n        let unregisteredComponents = Components.filter(\n          (Component) => !componentRegistered(Component)\n        );\n\n        if (unregisteredComponents.length > 0) {\n          throw new Error(\n            `Tried to create a query '${\n              this.constructor.name\n            }.${queryName}' with unregistered components: [${unregisteredComponents\n              .map((c) => c.getName())\n              .join(\", \")}]`\n          );\n        }\n\n        var query = this.world.entityManager.queryComponents(Components);\n\n        this._queries[queryName] = query;\n        if (queryConfig.mandatory === true) {\n          this._mandatoryQueries.push(query);\n        }\n        this.queries[queryName] = {\n          results: query.entities,\n        };\n\n        // Reactive configuration added/removed/changed\n        var validEvents = [\"added\", \"removed\", \"changed\"];\n\n        const eventMapping = {\n          added: Query.prototype.ENTITY_ADDED,\n          removed: Query.prototype.ENTITY_REMOVED,\n          changed: Query.prototype.COMPONENT_CHANGED, // Query.prototype.ENTITY_CHANGED\n        };\n\n        if (queryConfig.listen) {\n          validEvents.forEach((eventName) => {\n            if (!this.execute) {\n              console.warn(\n                `System '${this.getName()}' has defined listen events (${validEvents.join(\n                  \", \"\n                )}) for query '${queryName}' but it does not implement the 'execute' method.`\n              );\n            }\n\n            // Is the event enabled on this system's query?\n            if (queryConfig.listen[eventName]) {\n              let event = queryConfig.listen[eventName];\n\n              if (eventName === \"changed\") {\n                query.reactive = true;\n                if (event === true) {\n                  // Any change on the entity from the components in the query\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    (entity) => {\n                      // Avoid duplicates\n                      if (eventList.indexOf(entity) === -1) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                } else if (Array.isArray(event)) {\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    (entity, changedComponent) => {\n                      // Avoid duplicates\n                      if (\n                        event.indexOf(changedComponent.constructor) !== -1 &&\n                        eventList.indexOf(entity) === -1\n                      ) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                }\n              } else {\n                let eventList = (this.queries[queryName][eventName] = []);\n\n                query.eventDispatcher.addEventListener(\n                  eventMapping[eventName],\n                  (entity) => {\n                    // @fixme overhead?\n                    if (eventList.indexOf(entity) === -1)\n                      eventList.push(entity);\n                  }\n                );\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n  stop() {\n    this.executeTime = 0;\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  // @question rename to clear queues?\n  clearEvents() {\n    for (let queryName in this.queries) {\n      var query = this.queries[queryName];\n      if (query.added) {\n        query.added.length = 0;\n      }\n      if (query.removed) {\n        query.removed.length = 0;\n      }\n      if (query.changed) {\n        if (Array.isArray(query.changed)) {\n          query.changed.length = 0;\n        } else {\n          for (let name in query.changed) {\n            query.changed[name].length = 0;\n          }\n        }\n      }\n    }\n  }\n\n  toJSON() {\n    var json = {\n      name: this.getName(),\n      enabled: this.enabled,\n      executeTime: this.executeTime,\n      priority: this.priority,\n      queries: {},\n    };\n\n    if (this.constructor.queries) {\n      var queries = this.constructor.queries;\n      for (let queryName in queries) {\n        let query = this.queries[queryName];\n        let queryDefinition = queries[queryName];\n        let jsonQuery = (json.queries[queryName] = {\n          key: this._queries[queryName].key,\n        });\n\n        jsonQuery.mandatory = queryDefinition.mandatory === true;\n        jsonQuery.reactive =\n          queryDefinition.listen &&\n          (queryDefinition.listen.added === true ||\n            queryDefinition.listen.removed === true ||\n            queryDefinition.listen.changed === true ||\n            Array.isArray(queryDefinition.listen.changed));\n\n        if (jsonQuery.reactive) {\n          jsonQuery.listen = {};\n\n          const methods = [\"added\", \"removed\", \"changed\"];\n          methods.forEach((method) => {\n            if (query[method]) {\n              jsonQuery.listen[method] = {\n                entities: query[method].length,\n              };\n            }\n          });\n        }\n      }\n    }\n\n    return json;\n  }\n}\n\nSystem.isSystem = true;\nSystem.getName = function () {\n  return this.displayName || this.name;\n};\n\nfunction Not(Component) {\n  return {\n    operator: \"not\",\n    Component: Component,\n  };\n}\n\nclass TagComponent extends Component {\n  constructor() {\n    super(false);\n  }\n}\n\nTagComponent.isTagComponent = true;\n\nconst copyValue = (src) => src;\n\nconst cloneValue = (src) => src;\n\nconst copyArray = (src, dest) => {\n  if (!src) {\n    return src;\n  }\n\n  if (!dest) {\n    return src.slice();\n  }\n\n  dest.length = 0;\n\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i]);\n  }\n\n  return dest;\n};\n\nconst cloneArray = (src) => src && src.slice();\n\nconst copyJSON = (src) => JSON.parse(JSON.stringify(src));\n\nconst cloneJSON = (src) => JSON.parse(JSON.stringify(src));\n\nconst copyCopyable = (src, dest) => {\n  if (!src) {\n    return src;\n  }\n\n  if (!dest) {\n    return src.clone();\n  }\n\n  return dest.copy(src);\n};\n\nconst cloneClonable = (src) => src && src.clone();\n\nfunction createType(typeDefinition) {\n  var mandatoryProperties = [\"name\", \"default\", \"copy\", \"clone\"];\n\n  var undefinedProperties = mandatoryProperties.filter((p) => {\n    return !typeDefinition.hasOwnProperty(p);\n  });\n\n  if (undefinedProperties.length > 0) {\n    throw new Error(\n      `createType expects a type definition with the following properties: ${undefinedProperties.join(\n        \", \"\n      )}`\n    );\n  }\n\n  typeDefinition.isType = true;\n\n  return typeDefinition;\n}\n\n/**\n * Standard types\n */\nconst Types = {\n  Number: createType({\n    name: \"Number\",\n    default: 0,\n    copy: copyValue,\n    clone: cloneValue,\n  }),\n\n  Boolean: createType({\n    name: \"Boolean\",\n    default: false,\n    copy: copyValue,\n    clone: cloneValue,\n  }),\n\n  String: createType({\n    name: \"String\",\n    default: \"\",\n    copy: copyValue,\n    clone: cloneValue,\n  }),\n\n  Array: createType({\n    name: \"Array\",\n    default: [],\n    copy: copyArray,\n    clone: cloneArray,\n  }),\n\n  Ref: createType({\n    name: \"Ref\",\n    default: undefined,\n    copy: copyValue,\n    clone: cloneValue,\n  }),\n\n  JSON: createType({\n    name: \"JSON\",\n    default: null,\n    copy: copyJSON,\n    clone: cloneJSON,\n  }),\n};\n\nfunction generateId(length) {\n  var result = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nfunction injectScript(src, onLoad) {\n  var script = document.createElement(\"script\");\n  // @todo Use link to the ecsy-devtools repo?\n  script.src = src;\n  script.onload = onLoad;\n  (document.head || document.documentElement).appendChild(script);\n}\n\n/* global Peer */\n\nfunction hookConsoleAndErrors(connection) {\n  var wrapFunctions = [\"error\", \"warning\", \"log\"];\n  wrapFunctions.forEach((key) => {\n    if (typeof console[key] === \"function\") {\n      var fn = console[key].bind(console);\n      console[key] = (...args) => {\n        connection.send({\n          method: \"console\",\n          type: key,\n          args: JSON.stringify(args),\n        });\n        return fn.apply(null, args);\n      };\n    }\n  });\n\n  window.addEventListener(\"error\", (error) => {\n    connection.send({\n      method: \"error\",\n      error: JSON.stringify({\n        message: error.error.message,\n        stack: error.error.stack,\n      }),\n    });\n  });\n}\n\nfunction includeRemoteIdHTML(remoteId) {\n  let infoDiv = document.createElement(\"div\");\n  infoDiv.style.cssText = `\n    align-items: center;\n    background-color: #333;\n    color: #aaa;\n    display:flex;\n    font-family: Arial;\n    font-size: 1.1em;\n    height: 40px;\n    justify-content: center;\n    left: 0;\n    opacity: 0.9;\n    position: absolute;\n    right: 0;\n    text-align: center;\n    top: 0;\n  `;\n\n  infoDiv.innerHTML = `Open ECSY devtools to connect to this page using the code:&nbsp;<b style=\"color: #fff\">${remoteId}</b>&nbsp;<button onClick=\"generateNewCode()\">Generate new code</button>`;\n  document.body.appendChild(infoDiv);\n\n  return infoDiv;\n}\n\nfunction enableRemoteDevtools(remoteId) {\n  if (!hasWindow) {\n    console.warn(\"Remote devtools not available outside the browser\");\n    return;\n  }\n\n  window.generateNewCode = () => {\n    window.localStorage.clear();\n    remoteId = generateId(6);\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\n    window.location.reload(false);\n  };\n\n  remoteId = remoteId || window.localStorage.getItem(\"ecsyRemoteId\");\n  if (!remoteId) {\n    remoteId = generateId(6);\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\n  }\n\n  let infoDiv = includeRemoteIdHTML(remoteId);\n\n  window.__ECSY_REMOTE_DEVTOOLS_INJECTED = true;\n  window.__ECSY_REMOTE_DEVTOOLS = {};\n\n  let Version = \"\";\n\n  // This is used to collect the worlds created before the communication is being established\n  let worldsBeforeLoading = [];\n  let onWorldCreated = (e) => {\n    var world = e.detail.world;\n    Version = e.detail.version;\n    worldsBeforeLoading.push(world);\n  };\n  window.addEventListener(\"ecsy-world-created\", onWorldCreated);\n\n  let onLoaded = () => {\n    // var peer = new Peer(remoteId);\n    var peer = new Peer(remoteId, {\n      host: \"peerjs.ecsy.io\",\n      secure: true,\n      port: 443,\n      config: {\n        iceServers: [\n          { url: \"stun:stun.l.google.com:19302\" },\n          { url: \"stun:stun1.l.google.com:19302\" },\n          { url: \"stun:stun2.l.google.com:19302\" },\n          { url: \"stun:stun3.l.google.com:19302\" },\n          { url: \"stun:stun4.l.google.com:19302\" },\n        ],\n      },\n      debug: 3,\n    });\n\n    peer.on(\"open\", (/* id */) => {\n      peer.on(\"connection\", (connection) => {\n        window.__ECSY_REMOTE_DEVTOOLS.connection = connection;\n        connection.on(\"open\", function () {\n          // infoDiv.style.visibility = \"hidden\";\n          infoDiv.innerHTML = \"Connected\";\n\n          // Receive messages\n          connection.on(\"data\", function (data) {\n            if (data.type === \"init\") {\n              var script = document.createElement(\"script\");\n              script.setAttribute(\"type\", \"text/javascript\");\n              script.onload = () => {\n                script.parentNode.removeChild(script);\n\n                // Once the script is injected we don't need to listen\n                window.removeEventListener(\n                  \"ecsy-world-created\",\n                  onWorldCreated\n                );\n                worldsBeforeLoading.forEach((world) => {\n                  var event = new CustomEvent(\"ecsy-world-created\", {\n                    detail: { world: world, version: Version },\n                  });\n                  window.dispatchEvent(event);\n                });\n              };\n              script.innerHTML = data.script;\n              (document.head || document.documentElement).appendChild(script);\n              script.onload();\n\n              hookConsoleAndErrors(connection);\n            } else if (data.type === \"executeScript\") {\n              let value = eval(data.script);\n              if (data.returnEval) {\n                connection.send({\n                  method: \"evalReturn\",\n                  value: value,\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  };\n\n  // Inject PeerJS script\n  injectScript(\n    \"https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js\",\n    onLoaded\n  );\n}\n\nif (hasWindow) {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  // @todo Provide a way to disable it if needed\n  if (urlParams.has(\"enable-remote-devtools\")) {\n    enableRemoteDevtools();\n  }\n}\n\nexport { Component, Not, ObjectPool, System, SystemStateComponent, TagComponent, Types, Version, World, Entity as _Entity, cloneArray, cloneClonable, cloneJSON, cloneValue, copyArray, copyCopyable, copyJSON, copyValue, createType, enableRemoteDevtools };\n"],
  "mappings": "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",
  "names": ["Component", "Version", "System", "script", "connection", "remoteId", "infoDiv"]
}
